'use server';

/**
 * @fileOverview This file defines a Genkit flow for determining the probability of a user receiving a mock purchase notification.
 *
 * - purchaseProbability - A function that determines if a user should receive a mock purchase notification.
 * - PurchaseProbabilityInput - The input type for the purchaseProbability function.
 * - PurchaseProbabilityOutput - The return type for the purchaseProbability function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PurchaseProbabilityInputSchema = z.object({
  country: z.string().describe('The country of the user.'),
  isNewUser: z.boolean().describe('Whether the user is a new user or not.'),
});
export type PurchaseProbabilityInput = z.infer<typeof PurchaseProbabilityInputSchema>;

const PurchaseProbabilityOutputSchema = z.object({
  shouldSendNotification: z
    .boolean()
    .describe('Whether a mock purchase notification should be sent to the user.'),
});
export type PurchaseProbabilityOutput = z.infer<typeof PurchaseProbabilityOutputSchema>;

export async function purchaseProbability(input: PurchaseProbabilityInput): Promise<PurchaseProbabilityOutput> {
  return purchaseProbabilityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'purchaseProbabilityPrompt',
  input: {schema: PurchaseProbabilityInputSchema},
  output: {schema: PurchaseProbabilityOutputSchema},
  prompt: `You are a marketing expert. You are trying to determine if a user should receive a mock purchase notification to increase their confidence in the platform.

  Only send a notification if the user is from a rich country (USA, Switzerland, UAE, Norway, Germany) and is a new user.

  Country: {{{country}}}
  Is new user: {{{isNewUser}}}

  Return a JSON object with a boolean field \"shouldSendNotification\" indicating whether a mock purchase notification should be sent to the user.
  `,
});

const purchaseProbabilityFlow = ai.defineFlow(
  {
    name: 'purchaseProbabilityFlow',
    inputSchema: PurchaseProbabilityInputSchema,
    outputSchema: PurchaseProbabilityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































